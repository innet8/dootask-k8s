
apiVersion: v1
kind: Secret
metadata:
  name: dootask-secret
type: Opaque
stringData:
  DB_USERNAME: "dootask"
  DB_PASSWORD: "$DB_PASSWORD"
  DB_ROOT_PASSWORD: "$DB_ROOT_PASSWORD"
  APP_KEY: "$APP_KEY"
  APP_ID: "$APP_ID"
  DB_HOST: "dootask-mariadb"
  DB_PORT: "3306"
  DB_DATABASE: "dootask"
  DB_PREFIX: "pre_"
  REDIS_HOST: "redis-master.dootask-saas-share.svc"
  REDIS_PORT: "6379"
  TIMEZONE: "PRC"
  TAG: $TAG
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dootask-config
data:
  my.conf: |
    [mysqld]
    skip-host-cache
    skip-name-resolve
    skip-external-locking
    ignore-db-dir = lost+found

    binlog_cache_size = 256K
    thread_stack = 512K
    join_buffer_size = 8192K
    query_cache_type = 1
    max_heap_table_size = 2048M
    default_storage_engine = InnoDB
    performance_schema_max_table_instances = 400
    table_definition_cache = 400
    key_buffer_size = 1024M
    max_allowed_packet = 1024M
    table_open_cache = 2048
    sort_buffer_size = 4096K
    net_buffer_length = 4K
    read_buffer_size = 4096K
    read_rnd_buffer_size = 2048K
    myisam_sort_buffer_size = 8M
    thread_cache_size = 256
    query_cache_size = 384M
    tmp_table_size = 2048M
    sql-mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES

    max_connections = 500
    max_connect_errors = 100
    open_files_limit = 65535

    log-bin=mysql-bin
    binlog_format=mixed
    server-id = 1
    expire_logs_days = 10
    slow_query_log=1
    slow-query-log-file=/var/lib/mysql/mysql-slow.log
    long_query_time=3

    innodb_buffer_pool_size = 4096M
    innodb_log_file_size = 64M
    innodb_log_buffer_size = 16M
    innodb_flush_log_at_trx_commit = 1
    innodb_lock_wait_timeout = 50
    innodb_max_dirty_pages_pct = 90
    innodb_read_io_threads = 2
    innodb_write_io_threads = 2
    innodb_ft_min_token_size=1
    innodb_ft_max_token_size=80

    [mysqldump]
    quick
    max_allowed_packet = 2048M

    [mysql]
    no-auto-rehash

    [myisamchk]
    key_buffer_size = 32M
    sort_buffer_size = 768K
    read_buffer = 2M
    write_buffer = 2M

    [mysqlhotcopy]
    interactive-timeout
  .env: |
    TIMEZONE=PRC

    APP_NAME=DooTask
    APP_ENV=cloud
    APP_KEY=$APP_KEY
    APP_DEBUG=false
    APP_SCHEME=auto
    APP_URL=http://localhost

    APP_ID=$APP_ID
    APP_IPPR=
    APP_PORT=2222
    APP_SSL_PORT=
    APP_DEV_PORT=

    LOG_CHANNEL=stack
    LOG_LEVEL=debug

    DB_CONNECTION=mysql
    DB_HOST=dootask-mariadb
    DB_PORT=3306
    DB_DATABASE=dootask
    DB_USERNAME=dootask
    DB_PASSWORD=$DB_PASSWORD

    DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD
    DB_PREFIX=pre_

    BROADCAST_DRIVER=log
    CACHE_DRIVER=redis
    QUEUE_CONNECTION=redis
    SESSION_DRIVER=redis
    SESSION_LIFETIME=120

    MEMCACHED_HOST=127.0.0.1

    REDIS_HOST=redis-master.dootask-saas-share.svc
    REDIS_PASSWORD=null
    REDIS_PORT=6379

    MAIL_MAILER=smtp
    MAIL_HOST=mailhog
    MAIL_PORT=1025
    MAIL_USERNAME=null
    MAIL_PASSWORD=null
    MAIL_ENCRYPTION=null
    MAIL_FROM_ADDRESS=null
    MAIL_FROM_NAME="DooTask"

    AWS_ACCESS_KEY_ID=
    AWS_SECRET_ACCESS_KEY=
    AWS_DEFAULT_REGION=us-east-1
    AWS_BUCKET=

    PUSHER_APP_ID=
    PUSHER_APP_KEY=
    PUSHER_APP_SECRET=
    PUSHER_APP_CLUSTER=mt1

    MIX_PUSHER_APP_KEY=""
    MIX_PUSHER_APP_CLUSTER=""

    LARAVELS_LISTEN_IP=0.0.0.0
    LARAVELS_LISTEN_PORT=20000
    LARAVELS_WORKER_NUM=10
    LARAVELS_TASK_WORKER_NUM=20

    ZINCSEARCH_HOST=z.zincsearch.svc
    ZINCSEARCH_PORT=4080
    ZINCSEARCH_PASSWORD=123456
  app.py: |
    import os
    import yaml
    from fastapi import FastAPI, HTTPException
    from pydantic import BaseModel
    from datetime import datetime
    from typing import Optional, Dict

    app = FastAPI()

    BASE_CONFIG_DIR = "/app/config"

    class InstallRequest(BaseModel):
        version: str = "latest"
        params: Dict = {}
        resources: Dict = {"cpu_limit": "0", "memory_limit": "0"}
        appid: str

    class UninstallRequest(BaseModel):
        appid: str

    def ensure_config_dir(appid: str):
        app_dir = os.path.join(BASE_CONFIG_DIR, appid)
        os.makedirs(app_dir, exist_ok=True)
        return app_dir

    def get_config_path(appid: str):
        return os.path.join(BASE_CONFIG_DIR, appid, "config.yaml")

    def read_config(appid: str):
        config_path = get_config_path(appid)
        if not os.path.exists(config_path):
            return None
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)

    def write_config(appid: str, config: Dict):
        config_path = get_config_path(appid)
        ensure_config_dir(appid)
        with open(config_path, 'w') as f:
            yaml.dump(config, f, default_flow_style=False)

    @app.post("/appstore/api/v1/internal/install")
    async def install(request: InstallRequest):
        current_config = read_config(request.appid) or {
            "install_at": "",
            "install_num": 0,
            "install_version": "",
            "status": "not_installed",
            "params": {},
            "resources": {"cpu_limit": "0", "memory_limit": "0"}
        }

        current_config.update({
            "status": "installed",
            "install_num": current_config.get("install_num", 0) + 1,
            "install_at": datetime.now().isoformat(),
            "install_version": request.version,
            "params": request.params,
            "resources": request.resources
        })

        write_config(request.appid, current_config)
        return {"code": 0, "message": "Install successful", "data": current_config}

    @app.post("/appstore/api/v1/internal/uninstall")
    async def uninstall(request: UninstallRequest):
        current_config = read_config(request.appid)
        if not current_config:
            raise HTTPException(status_code=404, detail=f"App {request.appid} not found")

        current_config["status"] = "not_installed"
        write_config(request.appid, current_config)
        return {"code": 0, "message": "Uninstall successful", "data": current_config}

    @app.get("/appstore/api/v1/internal/status")
    async def get_status(appid: str):
        current_config = read_config(appid)
        if not current_config:
            raise HTTPException(status_code=404, detail=f"App {appid} not found")
        return {"code": 0, "message": "Success", "data": current_config}  