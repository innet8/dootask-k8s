
apiVersion: v1
kind: Secret
metadata:
  name: dootask-secret
type: Opaque
stringData:
  DB_USERNAME: "dootask"
  DB_PASSWORD: "$DB_PASSWORD"
  DB_ROOT_PASSWORD: "$DB_ROOT_PASSWORD"
  APP_KEY: "$APP_KEY"
  APP_ID: "$APP_ID"
  DB_HOST: "dootask-mariadb"
  DB_PORT: "3306"
  DB_DATABASE: "dootask"
  DB_PREFIX: "pre_"
  REDIS_HOST: "redis-master.dootask-saas-share.svc"
  REDIS_PORT: "6379"
  TIMEZONE: "PRC"
  TAG: $TAG
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dootask-config
data:
  my.conf: |
    [mysqld]
    skip-host-cache
    skip-name-resolve
    skip-external-locking
    ignore-db-dir = lost+found

    binlog_cache_size = 256K
    thread_stack = 512K
    join_buffer_size = 8192K
    query_cache_type = 1
    max_heap_table_size = 2048M
    default_storage_engine = InnoDB
    performance_schema_max_table_instances = 400
    table_definition_cache = 400
    key_buffer_size = 1024M
    max_allowed_packet = 1024M
    table_open_cache = 2048
    sort_buffer_size = 4096K
    net_buffer_length = 4K
    read_buffer_size = 4096K
    read_rnd_buffer_size = 2048K
    myisam_sort_buffer_size = 8M
    thread_cache_size = 256
    query_cache_size = 384M
    tmp_table_size = 2048M
    sql-mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES

    max_connections = 500
    max_connect_errors = 100
    open_files_limit = 65535

    log-bin=mysql-bin
    binlog_format=mixed
    server-id = 1
    expire_logs_days = 10
    slow_query_log=1
    slow-query-log-file=/var/lib/mysql/mysql-slow.log
    long_query_time=3

    innodb_buffer_pool_size = 4096M
    innodb_log_file_size = 64M
    innodb_log_buffer_size = 16M
    innodb_flush_log_at_trx_commit = 1
    innodb_lock_wait_timeout = 50
    innodb_max_dirty_pages_pct = 90
    innodb_read_io_threads = 2
    innodb_write_io_threads = 2
    innodb_ft_min_token_size=1
    innodb_ft_max_token_size=80

    [mysqldump]
    quick
    max_allowed_packet = 2048M

    [mysql]
    no-auto-rehash

    [myisamchk]
    key_buffer_size = 32M
    sort_buffer_size = 768K
    read_buffer = 2M
    write_buffer = 2M

    [mysqlhotcopy]
    interactive-timeout
  .env: |
    TIMEZONE=PRC

    APP_NAME=DooTask
    APP_ENV=cloud
    APP_KEY=$APP_KEY
    APP_DEBUG=false
    APP_SCHEME=auto
    APP_URL=http://localhost

    APP_ID=$APP_ID
    APP_IPPR=
    APP_PORT=2222
    APP_SSL_PORT=
    APP_DEV_PORT=

    LOG_CHANNEL=stack
    LOG_LEVEL=debug

    DB_CONNECTION=mysql
    DB_HOST=dootask-mariadb
    DB_PORT=3306
    DB_DATABASE=dootask
    DB_USERNAME=dootask
    DB_PASSWORD=$DB_PASSWORD

    DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD
    DB_PREFIX=pre_

    BROADCAST_DRIVER=log
    CACHE_DRIVER=redis
    QUEUE_CONNECTION=redis
    SESSION_DRIVER=redis
    SESSION_LIFETIME=120

    MEMCACHED_HOST=127.0.0.1

    REDIS_HOST=redis-master.dootask-saas-share.svc
    REDIS_PASSWORD=null
    REDIS_PORT=6379

    MAIL_MAILER=smtp
    MAIL_HOST=mailhog
    MAIL_PORT=1025
    MAIL_USERNAME=null
    MAIL_PASSWORD=null
    MAIL_ENCRYPTION=null
    MAIL_FROM_ADDRESS=null
    MAIL_FROM_NAME="DooTask"

    AWS_ACCESS_KEY_ID=
    AWS_SECRET_ACCESS_KEY=
    AWS_DEFAULT_REGION=us-east-1
    AWS_BUCKET=

    PUSHER_APP_ID=
    PUSHER_APP_KEY=
    PUSHER_APP_SECRET=
    PUSHER_APP_CLUSTER=mt1

    MIX_PUSHER_APP_KEY=""
    MIX_PUSHER_APP_CLUSTER=""

    LARAVELS_LISTEN_IP=0.0.0.0
    LARAVELS_LISTEN_PORT=20000
    LARAVELS_WORKER_NUM=10
    LARAVELS_TASK_WORKER_NUM=20

    ZINCSEARCH_HOST=z.zincsearch.svc
    ZINCSEARCH_PORT=4080
    ZINCSEARCH_PASSWORD=123456
  app.py: |
    import os
    import yaml
    from fastapi import FastAPI, HTTPException, Header, Request
    from pydantic import BaseModel
    from datetime import datetime
    from typing import Optional, Dict
    import httpx
    from kubernetes import client as k8s_client, config as k8s_config

    app = FastAPI()

    BASE_CONFIG_DIR = "/app/config"
    APPSTORE_API_URL = "http://dootask-appstore/api/v1/list"

    class InstallRequest(BaseModel):
        version: str = "latest"
        params: Dict = {}
        resources: Dict = {"cpu_limit": "0", "memory_limit": "0"}
        appid: str

    K8S_APPS = ["ai", "approve", "okr"]
    K8S_APPS_DIR = "/app/apps/"
    try:
        k8s_config.load_incluster_config()  # For running inside cluster
    except:
        k8s_config.load_kube_config()  # For local development

    def get_current_namespace():
        """获取当前运行的命名空间"""
        try:
            with open("/var/run/secrets/kubernetes.io/serviceaccount/namespace", "r") as f:
                return f.read().strip()
        except IOError:
            return "default"  # 本地开发或不在集群中运行时使用默认值
    
    def install_k8s_resources(appid: str, version: str):
        app_dir = os.path.join(K8S_APPS_DIR, appid, version, k8s)
        if not os.path.exists(app_dir):
            raise HTTPException(status_code=404, detail=f"K8s resources directory not found for app {appid}")
        
        # List all YAML files in the directory
        yaml_files = [f for f in os.listdir(app_dir) if f.endswith(('.yaml', '.yml'))]
        
        if not yaml_files:
            raise HTTPException(status_code=404, detail=f"No YAML files found for app {appid}")
        
        # Create Kubernetes API clients
        core_v1 = k8s_client.CoreV1Api()
        apps_v1 = k8s_client.AppsV1Api()
        networking_v1 = k8s_client.NetworkingV1Api()
        current_namespace = get_current_namespace()

        for yaml_file in yaml_files:
            file_path = os.path.join(app_dir, yaml_file)
            with open(file_path, 'r') as f:
                try:
                    # Parse the YAML file
                    yaml_content = yaml.safe_load(f)
                    if not yaml_content:
                        continue
                    kind = yaml_content.get('kind', '').lower()
                    
                    if kind == 'deployment':
                        apps_v1.create_namespaced_deployment(
                            body=yaml_content,
                            namespace=current_namespace
                        )
                    elif kind == 'service':
                        core_v1.create_namespaced_service(
                            body=yaml_content,
                            namespace=current_namespace
                        )
                    elif kind == 'configmap':
                        core_v1.create_namespaced_config_map(
                            body=yaml_content,
                            namespace=current_namespace
                        )
                    elif kind == 'secret':
                        core_v1.create_namespaced_secret(
                            body=yaml_content,
                            namespace=current_namespace
                        )
                    
                except Exception as e:
                    raise HTTPException(
                        status_code=500,
                        detail=f"Failed to create {kind} from {yaml_file}: {str(e)}"
                    )

    # Add this helper function
    def uninstall_k8s_resources(appid: str):
        current_namespace = get_current_namespace()
        try:
            core_v1 = k8s_client.CoreV1Api()
            apps_v1 = k8s_client.AppsV1Api()
            networking_v1 = k8s_client.NetworkingV1Api()
            
            # Delete deployment
            apps_v1.delete_namespaced_deployment(
                name=f"dootask-{appid}",
                namespace=current_namespace,
                propagation_policy="Foreground"
            )
            
            # Delete service
            core_v1.delete_namespaced_service(
                name=f"dootask-{appid}",
                namespace=current_namespace
            )
            
                
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Failed to delete Kubernetes resources for {appid}: {str(e)}"
            )

    def ensure_config_dir(appid: str):
        app_dir = os.path.join(BASE_CONFIG_DIR, appid)
        os.makedirs(app_dir, exist_ok=True)
        return app_dir

    def get_config_path(appid: str):
        return os.path.join(BASE_CONFIG_DIR, appid, "config.yml")

    def read_config(appid: str):
        config_path = get_config_path(appid)
        if not os.path.exists(config_path):
            return None
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)

    def write_config(appid: str, config: Dict):
        config_path = get_config_path(appid)
        ensure_config_dir(appid)
        with open(config_path, 'w') as f:
            yaml.dump(config, f, default_flow_style=False)

    async def get_app_info(appid: str, token: str):
        headers = {"Token": token}
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(APPSTORE_API_URL, headers=headers)
                if response.status_code != 200:
                    raise HTTPException(status_code=response.status_code, detail="Failed to fetch app info")
                
                data = response.json()
                if data.get("code") != 200:
                    raise HTTPException(status_code=400, detail=data.get("message", "Invalid response from appstore"))
                
                for app in data.get("data", []):
                    if app.get("id") == appid:
                        return app
                raise HTTPException(status_code=404, detail=f"App {appid} not found in appstore")
        except httpx.RequestError as e:
            raise HTTPException(status_code=500, detail=f"Error connecting to appstore: {str(e)}")

    @app.post("/appstore/api/v1/internal/install")
    async def install(
        request: InstallRequest,
        authorization: str = Header(..., alias="Token")
    ):
        # Get app info from appstore
        app_info = await get_app_info(request.appid, authorization)
        
        # Get first version if available, otherwise use requested version
        versions = app_info.get("versions", [])
        install_version = versions[0] if versions else request.version
        if request.appid in K8S_APPS:
            try:
                install_k8s_resources(request.appid, install_version)
            except HTTPException as e:
                raise e
            except Exception as e:
                raise HTTPException(
                    status_code=500,
                    detail=f"Failed to install Kubernetes resources: {str(e)}"
                )
        current_config = read_config(request.appid) or {
            "install_at": "",
            "install_num": 0,
            "install_version": "",
            "status": "not_installed",
            "params": {},
            "resources": {"cpu_limit": "0", "memory_limit": "0"}
        }

        current_config.update({
            "status": "installed",
            "install_num": current_config.get("install_num", 0) + 1,
            "install_at": datetime.now().isoformat(),
            "install_version": install_version,  # Use the version from appstore
            "params": request.params,
            "resources": request.resources
        })

        write_config(request.appid, current_config)
        return {"code": 200, "message": "Install successful", "data": current_config}

    @app.get("/appstore/api/v1/internal/uninstall/{appid}")
    async def uninstall(
        appid: str = Path(..., title="The ID of the app to uninstall"),
    ):
        # 统一处理 appid（从路径或请求体）
        target_appid = appid if appid else (request.appid if request else None)
        if not target_appid:
            raise HTTPException(status_code=400, detail="App ID must be specified")
        
        current_config = read_config(target_appid)
        if not current_config:
            raise HTTPException(status_code=404, detail=f"App {target_appid} not found")

        # 如果是 K8S 应用，执行 Kubernetes 资源删除
        # if target_appid in K8S_APPS:
        #     try:
        #         uninstall_k8s_resources(target_appid)
        #     except Exception as e:
        #         logging.error(f"Failed to uninstall K8S resources for {target_appid}: {str(e)}")
        #         raise HTTPException(
        #             status_code=500,
        #             detail=f"Failed to uninstall K8S resources: {str(e)}"
        #         )

        current_config["status"] = "not_installed"
        write_config(target_appid, current_config)
        return {
            "code": 200,
            "message": "Uninstall successful",
            "data": current_config
        }

    @app.get("/appstore/api/v1/internal/status")
    async def get_status(appid: str):
        current_config = read_config(appid)
        if not current_config:
            raise HTTPException(status_code=404, detail=f"App {appid} not found")
        return {"code": 200, "message": "Success", "data": current_config}